src.esercizio_esteso.tools.custom_tool
======================================

.. py:module:: src.esercizio_esteso.tools.custom_tool

.. autoapi-nested-parse::

   Custom Tools for CrewAI Multi-Agent System.

   This module provides custom tools that extend the capabilities of CrewAI agents,
   including local Retrieval-Augmented Generation (RAG) functionality and
   mathematical equation solving tools.

   Classes
   -------
   MyCustomToolInput : BaseModel
       Pydantic model defining the input schema for custom tools.
   LocalRag : BaseTool
       Tool for performing local RAG operations using FAISS and Azure OpenAI.
   MathEquationsTool : BaseTool
       Tool for solving mathematical equations and performing calculations.

   .. rubric:: Notes

   The tools require proper environment configuration for Azure OpenAI access
   and depend on the FAISS vector database for RAG functionality.



Classes
-------

.. autoapisummary::

   src.esercizio_esteso.tools.custom_tool.LocalRag
   src.esercizio_esteso.tools.custom_tool.MathEquationsTool
   src.esercizio_esteso.tools.custom_tool.MyCustomToolInput


Module Contents
---------------

.. py:class:: LocalRag(/, **data: Any)

   Bases: :py:obj:`crewai.tools.BaseTool`


   Local Retrieval-Augmented Generation (RAG) tool.

   This tool performs local RAG operations using FAISS vector database
   and Azure OpenAI for embeddings and response generation. It enables
   agents to answer questions based on local document collections with
   semantic search and citation capabilities.

   .. attribute:: name

      Tool identifier used by CrewAI agents.

      :type: str

   .. attribute:: description

      Detailed description of tool capabilities and usage.

      :type: str

   .. attribute:: args_schema

      Pydantic model defining the input schema.

      :type: Type[BaseModel]

   .. method:: _get_python_executable()

      Determines the correct Python executable path for the virtual environment.

   .. method:: _load_rag_functions()

      Dynamically imports RAG functionality modules.

   .. method:: _run(question: str)

      Executes the RAG pipeline with the provided question.


   .. rubric:: Examples

   >>> rag_tool = LocalRag()
   >>> result = rag_tool._run("What is the system architecture?")

   .. rubric:: Notes

   The tool requires a pre-indexed FAISS database and proper Azure OpenAI
   configuration. Error handling ensures graceful degradation when
   components are unavailable.


.. py:class:: MathEquationsTool(/, **data: Any)

   Bases: :py:obj:`crewai.tools.BaseTool`


   Mathematical equations solver tool.

   This tool provides mathematical problem-solving capabilities using
   Azure OpenAI to parse, solve, and explain mathematical equations
   with step-by-step solutions.

   .. attribute:: name

      Tool identifier used by CrewAI agents.

      :type: str

   .. attribute:: description

      Detailed description of mathematical solving capabilities.

      :type: str

   .. attribute:: args_schema

      Pydantic model defining the input schema.

      :type: Type[BaseModel]

   .. method:: _run(question: str)

      Processes mathematical questions and returns solutions.


   .. rubric:: Examples

   >>> math_tool = MathEquationsTool()
   >>> result = math_tool._run("Solve: 2x + 5 = 15")

   .. rubric:: Notes

   The tool uses Azure OpenAI with specific prompting to ensure
   mathematical accuracy and provides Python-executable equations
   when appropriate.


.. py:class:: MyCustomToolInput(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Input schema for custom tools.

   Defines the standard input format for all custom tools in the system,
   ensuring consistent parameter validation and type checking.

   .. attribute:: question

      The question or input text to be processed by the tool.
      This field is required and must contain meaningful content
      for the tool to process effectively.

      :type: str

   .. rubric:: Examples

   >>> input_data = MyCustomToolInput(question="What is machine learning?")
   >>> print(input_data.question)


